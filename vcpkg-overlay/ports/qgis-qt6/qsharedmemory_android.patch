diff --git a/src/providers/wfs/qgscachedirectorymanager.cpp b/src/providers/wfs/qgscachedirectorymanager.cpp
index e354412ba0d..1c134a9779a 100644
--- a/src/providers/wfs/qgscachedirectorymanager.cpp
+++ b/src/providers/wfs/qgscachedirectorymanager.cpp
@@ -24,9 +24,12 @@
 #include <QFile>
 #include <QDir>
 #include <QTimer>
-#include <QSharedMemory>
 #include <QDateTime>
 
+#if not defined( Q_OS_ANDROID )
+#include <QSharedMemory>
+#endif
+
 // -------------------------
 
 std::map<QString, std::unique_ptr<QgsCacheDirectoryManager>> QgsCacheDirectoryManager::sMap;
@@ -79,11 +82,13 @@ QString QgsCacheDirectoryManager::getCacheDirectory( bool createIfNotExisting )
       QgsDebugMsgLevel( QStringLiteral( "Creating our cache dir %1/%2" ).arg( baseDirectory, processPath ), 2 );
       QDir( baseDirectory ).mkpath( processPath );
     }
+#if not defined( Q_OS_ANDROID )
     if ( mCounter == 0 && mKeepAliveWorks )
     {
       mThread = new QgsCacheDirectoryManagerKeepAlive( createAndAttachSHM() );
       mThread->start();
     }
+#endif
     mCounter ++;
   }
   return QDir( baseDirectory ).filePath( processPath );
@@ -154,6 +159,7 @@ bool QgsCacheDirectoryManager::removeDir( const QString &dirName )
   return dir.rmdir( dirName );
 }
 
+#if not defined( Q_OS_ANDROID )
 std::unique_ptr<QSharedMemory> QgsCacheDirectoryManager::createAndAttachSHM()
 {
   std::unique_ptr<QSharedMemory> sharedMemory;
@@ -179,12 +185,17 @@ std::unique_ptr<QSharedMemory> QgsCacheDirectoryManager::createAndAttachSHM()
   }
   return nullptr;
 }
+#endif
 
 void QgsCacheDirectoryManager::init()
 {
+#if not defined( Q_OS_ANDROID )
   auto sharedMemory = createAndAttachSHM();
   mKeepAliveWorks = sharedMemory.get() != nullptr;
   sharedMemory.reset();
+#else
+  mKeepAliveWorks = false;
+#endif
 
   if ( mKeepAliveWorks )
   {
@@ -214,6 +225,7 @@ void QgsCacheDirectoryManager::init()
         {
           canDelete = true;
         }
+#if not defined( Q_OS_ANDROID )
         else if ( mKeepAliveWorks )
         {
           canDelete = true;
@@ -248,6 +260,7 @@ void QgsCacheDirectoryManager::init()
             QgsDebugError( QStringLiteral( "Cannot attach to shared memory segment of process %1. It must be ghost" ).arg( pid ) );
           }
         }
+#endif
         else
         {
           // Fallback to a file timestamp based method, if for some reason,
@@ -277,6 +290,7 @@ void QgsCacheDirectoryManager::init()
 
 // -------------------------
 
+#if not defined( Q_OS_ANDROID )
 // We use a keep alive mechanism where every KEEP_ALIVE_DELAY ms we update
 // a shared memory segment with the current timestamp. This way, other QGIS
 // processes can check if the temporary directories of other process correspond
@@ -310,3 +324,4 @@ void QgsCacheDirectoryManagerKeepAlive::run()
   connect( &timer, &QTimer::timeout, this, &QgsCacheDirectoryManagerKeepAlive::updateTimestamp );
   QThread::exec();
 }
+#endif
diff --git a/src/providers/wfs/qgscachedirectorymanager.h b/src/providers/wfs/qgscachedirectorymanager.h
index c3ed4bc067f..c43ed18a52d 100644
--- a/src/providers/wfs/qgscachedirectorymanager.h
+++ b/src/providers/wfs/qgscachedirectorymanager.h
@@ -19,7 +19,10 @@
 #include <QString>
 #include <QThread>
 #include <QMutex>
+
+#if not defined( Q_OS_ANDROID )
 #include <QSharedMemory>
+#endif
 
 #include <map>
 #include <memory>
@@ -56,8 +59,10 @@ class QgsCacheDirectoryManager
     //! Called by constructor
     void init();
 
+#if not defined( Q_OS_ANDROID )
     //! Create a shared memory segment for the keep-alive mechanism
     std::unique_ptr<QSharedMemory> createAndAttachSHM();
+#endif
 
     //! Returns the name of temporary directory.
     QString getCacheDirectory( bool createIfNotExisting );
@@ -68,6 +73,7 @@ class QgsCacheDirectoryManager
     static bool removeDir( const QString &dirName );
 };
 
+#if not defined( Q_OS_ANDROID )
 //! For internal use of QgsCacheDirectoryManager
 class QgsCacheDirectoryManagerKeepAlive: public QThread
 {
@@ -82,5 +88,6 @@ class QgsCacheDirectoryManagerKeepAlive: public QThread
   private:
     std::unique_ptr<QSharedMemory> mSharedMemory;
 };
+#endif
 
 #endif // QGSCACHEDIRECTORYMANAGER_H
