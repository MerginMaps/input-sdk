name: Build Linux

on:
  push:
    paths:
      - 'linux/**'
      - '.github/workflows/linux.yml'
      - 'versions.conf'
  release:
    types:
      - published

jobs:
  linux_build:
    runs-on: ubuntu-22.04
    if: github.repository == 'merginmaps/input-sdk'
    env:
      ARCH: 'linux-x86_64'
      UBUNTU_VERSION: 2204
      QT_VERSION: '5.14.2'
      CACHE_VERSION: 8
      TRIPLET: "x64-linux"
      VCPKG_BASELINE: "5bb332b432e0fa3899de1a2ef8fc4c10c435408d" # compatible with vcpkg.json baseline
      VCPKG_ROOT: "/home/runner/vcpkg_root" # We need a lot of space for vcpkg build/install dir
      
    steps:
      - name: Check disk space
        run: |
            df --output=avail -h "/home/runner/" | tail -n 1
          
      - uses: actions/checkout@v2

      - name: Check deps versions change
        run: |
          CHECKSUM=$( md5sum vcpkg-test/vcpkg.json | cut -d ' ' -f1 )
          echo "DEPS_CHECKSUM=$CHECKSUM" >> $GITHUB_ENV

      - name: Clone vcpkg
        shell: bash
        run: |
          mkdir -p "${{ env.VCPKG_ROOT }}"
          cd "${{ env.VCPKG_ROOT }}"
          git init
          git remote add origin https://github.com/microsoft/vcpkg.git
          git pull origin master
          git checkout $VCPKG_BASELINE

      - name: Cache vcpkg
        id: cache-vcpkg-tool
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-${{ env.VCPKG_BASELINE }}-v${{ env.CACHE_VERSION }}
          
      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/build
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.UBUNTU_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.UBUNTU_VERSION }}-${{ github.ref }}-
            cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.UBUNTU_VERSION }}-refs/heads/master-

      - name: Install Build Dependencies
        run: |
            echo "Versions checksum: ${{ env.DEPS_CHECKSUM }}"
            sudo apt-get update
            sudo apt-get install -y build-essential make ninja-build cmake
            sudo apt-get remove -y libopenexr-dev # Avoid gdal picking this system lib up

      - name: Cache Qt
        id: cache-qt
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-v2-${{ env.QT_VERSION }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VERSION }}
          setup-python: 'false'
          dir: ${{ github.workspace }}
          py7zrversion: '==0.18.1'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Build Sdk
        run: |
             export PATH="$VCPKG_ROOT/bin:$PATH"
             cd $GITHUB_WORKSPACE
             mkdir -p ${{ github.workspace }}/build/${{ env.ARCH }}
        
             cmake -B ${{ github.workspace }}/build/${{ env.ARCH }} \
                   -DCMAKE_GENERATOR=Ninja \
                   -DCMAKE_BUILD_TYPE=Release \
                   -S ${{ github.workspace }}/vcpkg-test \
                   "-DCMAKE_MODULE_PATH:PATH=${{ github.workspace }}/vcpkg-test/cmake" \
                   "-DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
                   -DVCPKG_TARGET_TRIPLET=${{ env.TRIPLET }} \
                   -DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/vcpkg-overlay/triplets \
                   -DVCPKG_OVERLAY_PORTS=${{ github.workspace }}/vcpkg-overlay/ports

             cmake --build $BUILD_DIR --verbose

      - name: Run SDK Tests
        shell: pwsh
        run: |
            cd build/${{ env.ARCH }}
            ls
            ./inputsdktest
            
      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'
          
      - name: Create package
        run: |
          SDK_TAR=input-sdk-ubuntu-${{ env.UBUNTU_VERSION }}-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
          echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
          cd "${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/${{ env.TRIPLET }}"
          tar -c -z -f ${{ github.workspace }}/${SDK_TAR} ./

      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ubuntu-${{ env.UBUNTU_VERSION }}-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
