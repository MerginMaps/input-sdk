name: Build Linux

on:
  push:
    paths:	
      - 'linux/**'
      - '.github/workflows/linux.yml'
      - 'versions.conf'
  release:
    types:
      - published

jobs:
  linux_build:
    runs-on: ubuntu-20.04
    if: github.repository == 'lutraconsulting/input-sdk'
    env:
      ARCH: 'linux-x86_64'
      CACHE_VERSION: 1
      UBUNTU_VERSION: 2004

    steps:
      - uses: actions/checkout@v2

      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/build
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: cache-v${{ env.CACHE_VERSION }}-${{ env.UBUNTU_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            cache-v${{ env.CACHE_VERSION }}-${{ env.UBUNTU_VERSION }}-${{ github.ref }}-
            cache-v${{ env.CACHE_VERSION }}-${{ env.UBUNTU_VERSION }}-refs/heads/master-

      - name: Install Build Dependencies
        run: |
            sudo apt-get install -y qtpositioning5-dev qml-module-qtmultimedia qml-module-qtpositioning \
                                    qml-module-qtqml-models2 qml-module-qtgraphicaleffects qml-module-qtquick-dialogs \
                                    qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-layouts \
                                    qml-module-qtquick-shapes qml-module-qtquick-controls qtquickcontrols2-5-dev \
                                    libqt5sensors5-dev qtmultimedia5-dev
            sudo apt-get install -y qml-module-qt-labs-*
            
            sudo apt-get install -y bison ca-certificates ccache cmake cmake-curses-gui dh-python expect flex flip gdal-bin \
                            git graphviz libexiv2-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev \
                            libgsl-dev libpq-dev libproj-dev libprotobuf-dev libqca-qt5-2-dev \
                            libqca-qt5-2-plugins libqscintilla2-qt5-dev libqt5opengl5-dev libqt5serialport5-dev \
                            libqt5sql5-sqlite libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libqwt-qt5-dev \
                            libspatialindex-dev libspatialite-dev libsqlite3-dev libsqlite3-mod-spatialite libyaml-tiny-perl \
                            libzip-dev libzstd-dev lighttpd locales ninja-build \
                            pkg-config poppler-utils protobuf-compiler pyqt5-dev pyqt5-dev-tools pyqt5.qsci-dev python3-all-dev \
                            qt3d-assimpsceneimport-plugin qt3d-defaultgeometryloader-plugin qt3d-gltfsceneio-plugin qt3d-scene2d-plugin \
                            qt3d5-dev qt5-default qt5keychain-dev qtbase5-dev qtbase5-private-dev qtpositioning5-dev qttools5-dev \
                            qttools5-dev-tools spawn-fcgi xauth xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb

      - name: Export config.conf
        run: |
          touch ./linux/config.conf
          echo -e "export ROOT_OUT_PATH=${{ github.workspace }}/build"  >> ./linux/config.conf
          echo -e "export ARCHES=("\""${{ env.ARCH }}"\"")"  >> ./linux/config.conf
          cat ./linux/config.conf

      - name: Build Sdk
        run: |
          ./linux/distribute.sh -mqgis
 
      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create package
        run: |
          SDK_TAR=input-sdk-ubuntu-${{ env.UBUNTU_VERSION }}-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
          echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
          cd "${{ github.workspace }}/build/stage/${{ env.ARCH }}"
          tar -c -z -f ${{ github.workspace }}/${SDK_TAR} ./

      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ubuntu-${{ env.UBUNTU_VERSION }}-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
