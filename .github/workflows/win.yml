name: Build win64

on:
  push:
    paths-ignore:
      - '.github/workflows/android.yml'
      - '.github/workflows/ios.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/mac.yml'
      - 'LICENSE'
      - 'README.md'
 
concurrency:
  group: ci-${{github.ref}}-windows
  cancel-in-progress: true

jobs:
  win64_build:
    if: ( github.repository == 'MerginMaps/input-sdk' )
    runs-on: windows-2019

    env:
      QT_VERSION: '6.5.2'
      TRIPLET: "x64-windows"
      VS_VERSION: "2019"
      CMAKE_GENERATOR: "Visual Studio 16 2019" # see https://github.com/actions/runner-images/blob/main/images/win/Windows2019-Readme.md
      CMAKE_ARCH: "x64"
      QT_ARCH: "win64_msvc2019_64" # run: aqt list $QT_VERSION windows desktop
      VCPKG_BASELINE: "2f6176ce98fee807a207dc9e8fec213f111c291b" # use scripts/update_vcpkg_base.bash to change
      VCPKG_ROOT: "C:/vcpkg-root" # Looks like there is more space on C: than on D: drive (~14GB)
      CACHE_VERSION: 0
      
    steps:
      - uses: actions/checkout@v3
        with:
          path: input-sdk

      - name: Prepare vars
        id: vars
        shell: bash
        run: |
          WORKSPACE_DIR=$(cygpath -m "${{ github.workspace }}")
          echo "::set-output name=WORKSPACE_DIR::$WORKSPACE_DIR"
          echo "WORKSPACE_DIR: $WORKSPACE_DIR"

      - uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          setup-python: 'false'
          target: desktop
          arch: ${{ env.QT_ARCH }}
          dir: ${{ github.workspace }}
          modules: 'qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools'
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-v1-${{ env.QT_VERSION }}-win

      - name: Setup compiler
        shell: cmd
        run: |
            CALL "C:\Program Files (x86)\Microsoft Visual Studio\${{ env.VS_VERSION }}\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=${{ env.CMAKE_ARCH }}

      - name: Restore vcpkg folder
        id: cache-vcpkg-restore
        if: ${{ github.ref != 'refs/heads/master' }} # do not use cache on master
        uses: actions/cache/restore@v3
        with:
          path: ${ env.VCPKG_ROOT }
          key: VCPKG-${{ runner.os }}-${{ env.TRIPLET }}-v${{ env.CACHE_VERSION }}-ref-${{ github.ref }}

      - uses: actions/checkout@v3
        if: steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        with:
          repository: microsoft/vcpkg
          path: ${ env.VCPKG_ROOT }
          ref: ${ env.VCPKG_BASELINE }

      - name: Build Deps
        shell: pwsh
        run: |
          $ErrorActionPreference = 'continue'
          function exec
          {
              param ( [ScriptBlock] $ScriptBlock )
              & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
              if ($LastExitCode -ne 0) { exit $LastExitCode }
          }
          $env:PATH="$env:VCPKG_ROOT;$env:PATH"
          cd $env:GITHUB_WORKSPACE
          mkdir ${{ github.workspace }}\build -ea 0
          exec { 
            cmake -B ${{ github.workspace }}\build `
            -S ${{ github.workspace }}\input-sdk `
            -DCMAKE_TOOLCHAIN_FILE:PATH="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -G "${{ env.CMAKE_GENERATOR }}" `
            -A ${{ env.CMAKE_ARCH }} `
            -DVCPKG_TARGET_TRIPLET=${{ env.TRIPLET }} `
            -DVCPKG_OVERLAY_TRIPLETS:PATH="${{ steps.vars.outputs.WORKSPACE_DIR }}/vcpkg-overlay/triplets" `
            -DVCPKG_OVERLAY_PORTS="${{ steps.vars.outputs.WORKSPACE_DIR }}/vcpkg-overlay/ports"
          }

      - name: Upload build logs on deps failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-logs-${{ env.TRIPLET }}
          path: |
            ${{ env.VCPKG_ROOT }}/buildtrees/**/*.log

      - name: Save vcpkg folder
        uses: actions/cache/save@v3
        if: always() && ${{ github.ref != 'refs/heads/master' }} # do not use cache on master; save on error too
        id: cache-build-save
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ steps.cache-vcpkg-restore.outputs.cache-primary-key }}
          
      - name: Build Test App
        shell: pwsh
        run: |
          $ErrorActionPreference = 'continue'
          function exec
          {
              param ( [ScriptBlock] $ScriptBlock )
              & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
              if ($LastExitCode -ne 0) { exit $LastExitCode }
          }
          $env:PATH="$env:VCPKG_ROOT;$env:PATH"
          cd $env:GITHUB_WORKSPACE
          exec { cmake --build ${{ github.workspace }}\build. --config Release --verbose }

      - name: Run SDK Tests
        shell: pwsh
        run: |
            $ErrorActionPreference = 'continue'
            function exec
            {
                param ( [ScriptBlock] $ScriptBlock )
                & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
                if ($LastExitCode -ne 0) { exit $LastExitCode }
            }
            exec { ${{ github.workspace }}\build\Release\merginmapsinputsdk.exe }
         
      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create SDK data folder 
        shell: bash
        run: |
            mkdir -p ${{ github.workspace }}/sdk
            cp -R ${{ github.workspace }}/build/vcpkg_installed/${{ env.TRIPLET }}/* ${{ github.workspace }}/sdk/*
            rm -rf ${{ github.workspace }}/sdk/etc
            rm -rf ${{ github.workspace }}/sdk/mkspecs
            rm -rf ${{ github.workspace }}/sdk/share
            rm -rf ${{ github.workspace }}/sdk/tools
            
            SDK_TAR=input-sdk-qt-${{ env.QT_VERSION }}-${{ env.TRIPLET }}-${{ steps.time.outputs.time }}-${{ github.run_number }}.zip
            echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
            
            find ${{ github.workspace }}/sdk/bin/ | grep dll
            
      - name: Create ZIP package
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          directory: sdk/
          filename: ${{ steps.vars.outputs.WORKSPACE_DIR }}/${{ env.SDK_TAR }}
          
      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ steps.vars.outputs.WORKSPACE_DIR }}/${{ env.SDK_TAR }}
          if-no-files-found: error
          
      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TRIPLET }}-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
