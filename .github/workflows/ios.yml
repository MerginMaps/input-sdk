name: Build ios

on:
  push:
    paths:
      - 'ios/**'
      - '.github/workflows/ios.yml'
      - 'versions.conf'
  release:
    types:
      - published

jobs:
  ios_build:
    runs-on: macos-12
    env:
      IOS_MIN_SDK_VERSION: '14.0' # iOS Deployment target 
      QT_VERSION: '6.5.0'
      ARCHES: 'arm64'
      CACHE_VERSION: 0
      XC_VERSION: ${{ '14.2' }}

    steps:
      - uses: actions/checkout@v2

      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
        
      - name: Check deps versions change
        run: |
          CHECKSUM=$( md5 -r versions.conf | cut -d ' ' -f1 )
          echo "DEPS_CHECKSUM=$CHECKSUM" >> $GITHUB_ENV

      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/build
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.QT_VERSION }}-${{ github.ref }}-${{ env.IOS_MIN_SDK_VERSION }}-${{ github.sha }}
          restore-keys: |
            cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.QT_VERSION }}-${{ github.ref }}-${{ env.IOS_MIN_SDK_VERSION }}-
            cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.QT_VERSION }}-refs/heads/master-${{ env.IOS_MIN_SDK_VERSION }}-

      - name: Install Build Dependencies
        run: |
          echo "Versions checksum: ${{ env.DEPS_CHECKSUM }}"
          brew install bison flex automake shtool gtk-doc cmake
          echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
          pip3 install -U pip
          pip3 install aqtinstall
      
      # cannot use install-qt-action@v3 due to missing input-sdk/Qt/6.3.x/macos/bin/qmake
      # see also https://github.com/miurahr/aqtinstall/issues/503
      - name: Cache Qt
        id: cache-qt
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-v2-${{ env.QT_VERSION }}-ios
          
      - name: Install Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          python3 -m aqt install-qt \
            mac ios ${{ env.QT_VERSION }} \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
            
          python3 -m aqt install-qt \
            mac desktop ${{ env.QT_VERSION }} \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
            
          ls -la ${{ github.workspace }}/Qt
          ls -la ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}
          
      - name: Export config.conf
        run: |
          touch ./ios/config.conf
          echo -e "export QT_VERSION=${{ env.QT_VERSION }}"  >> ./ios/config.conf
          echo -e "export ROOT_OUT_PATH=${{ github.workspace }}/build"  >> ./ios/config.conf
          echo -e "export IOS_MIN_SDK_VERSION=${{ env.IOS_MIN_SDK_VERSION }}"  >> ./ios/config.conf
          echo -e "export QT_BASE=${{ github.workspace }}/Qt/${{ env.QT_VERSION }}"  >> ./ios/config.conf
          echo -e "export MACOSX_DEPLOYMENT_TARGET=${{ env.IOS_MIN_SDK_VERSION }}"  >> ./ios/config.conf
          echo -e "export ARCHES=("\""${{ env.ARCHES }}"\"")"  >> ./ios/config.conf
          cat ./ios/config.conf
          
          ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/ios/bin/qmake --version
          which cmake 
          cmake --version

      - name: Build Sdk
        run: |
          ./ios/distribute.sh -mqgis

      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create package
        run: |
          SDK_TAR=input-sdk-qt-${{ env.QT_VERSION }}-ios-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
          echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
          cd "${{ github.workspace }}/build/stage"
          tar -c -z --exclude=*.pyc -f ${{ github.workspace }}/${SDK_TAR} ./

      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ios-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
