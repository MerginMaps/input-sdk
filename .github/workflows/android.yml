name: Build android (on MacOS)

on:
  push:
    paths:
      - 'vcpkg-test/**'
      - 'vcpkg-overlay/**'
      - '.github/workflows/android.yml'

  release:
    types:
      - published

concurrency:
  group: ci-${{github.ref}}-android
  cancel-in-progress: true
  
jobs:
  android_build:
    strategy:
      fail-fast: false
      matrix:
        arch: [arm, amd64]
    runs-on: macos-12
    env:
      QT_VERSION: '6.5.2'
      ANDROIDAPI: 24
      NDK_VERSION: r25b
      NDK_VERSION_FULL: r25b
      JDK_VERSION: 11
      SDK_PLATFORM: android-33
      SDK_BUILD_TOOLS: 33.0.1
      CACHE_VERSION: 0
      QT_CACHE_VERSION: 0
      XC_VERSION: ${{ '14.2' }}
      VCPKG_BASELINE: "2f6176ce98fee807a207dc9e8fec213f111c291b" # use scripts/update_vcpkg_base.bash to change
      VCPKG_ROOT: "/Users/runner/vcpkg-root"
      
    steps:
      - uses: actions/checkout@v3

      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"

      - uses: lukka/get-cmake@latest # cmake & ninja

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION_FULL }}
          add-to-path: true

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
         java-version: ${{ env.JDK_VERSION }}
         distribution: zulu

      - name: Setup Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.1.2

      - name: Install Android Tools
        run: |
          sdkmanager --licenses && sdkmanager --verbose "platforms;${SDK_PLATFORM}" "build-tools;${SDK_BUILD_TOOLS}" tools platform-tools

      - name: Restore cached QT
        id: cache-qt-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-v${{ env.QT_CACHE_VERSION }}-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}

      - name: Install Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          pip3 install -U pip
          pip3 install aqtinstall
        
          python3 -m aqt install-qt \
            mac android ${{ env.QT_VERSION }} android_arm64_v8a \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
            
          python3 -m aqt install-qt \
            mac android ${{ env.QT_VERSION }} android_armv7 \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
        
          python3 -m aqt install-qt \
            mac desktop ${{ env.QT_VERSION }} \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt
          
          ls -la ${{ github.workspace }}/Qt/${{ env.QT_VERSION }}

      - name: Save cached Qt
        uses: actions/cache/save@v3
        if: always()
        id: cache-qt-save
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-v${{ env.QT_CACHE_VERSION }}-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}

      - name: Restore cached vcpkg build folder
        id: cache-vcpkg-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-v${{ env.CACHE_VERSION }}-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}

      - name: Clone vcpkg
        if: steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${{ env.VCPKG_ROOT }}"
          cd "${{ env.VCPKG_ROOT }}"
          git init
          git remote add origin https://github.com/microsoft/vcpkg.git
          git pull origin master
          git checkout $VCPKG_BASELINE

      - name: Build SDK ${{ matrix.arch }}-android
        run: |
          mkdir -p ${{ github.workspace }}/build/${{ matrix.arch }}
          cd ${{ github.workspace }}/build/${{ matrix.arch }}
          cmake -B ${{ github.workspace }}/build/${{ matrix.arch }} \
                -S ${{ github.workspace }}/vcpkg-test \
                -DCMAKE_MODULE_PATH:PATH="${{ github.workspace }}/vcpkg-test/cmake" \
                -DCMAKE_TOOLCHAIN_FILE:PATH="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
                -G Ninja \
                -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-android \
                -DVCPKG_OVERLAY_TRIPLETS:PATH="${{ github.workspace }}/vcpkg-overlay/triplets" \
                -DVCPKG_OVERLAY_PORTS="${{ github.workspace }}/vcpkg-overlay/ports"

      - name: Upload build logs on deps failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-logs-${{ matrix.arch }}-android
          path: |
            ${{ env.VCPKG_ROOT }}/buildtrees/**/*.log

      - name: Save cached vcpkg build folder
        uses: actions/cache/save@v3
        if: always()
        id: cache-vcpkg-save
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-v${{ env.CACHE_VERSION }}-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}

      - name: Build Test App
        run: |
          cd ${{ github.workspace }}/build/${{ matrix.arch }}
          ninja

      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create package
        run: |
          SDK_TAR=input-sdk-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}-android-${{ runner.os }}-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
          echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
          cd ${{ github.workspace }}/${{ matrix.arch }}/vcpkg_installed/${{ matrix.arch }}-android/
          tar -c -z --exclude=*.pyc -f ${{ github.workspace }}/${SDK_TAR} ./

      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ matrix.arch }}-android-${{ runner.os }}-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
