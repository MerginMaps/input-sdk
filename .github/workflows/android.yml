name: Build android (on MacOS)

on:
  push:
    paths-ignore:
      - '.github/workflows/ios.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/mac.yml'
      - '.github/workflows/win.yml'
      - 'LICENSE'
      - 'README.md'

concurrency:
  group: ci-${{github.ref}}-android
  cancel-in-progress: true
  
jobs:
  android_build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - TRIPLET: 'arm-android'
            QT_ARCH: 'android_armv7'
          - TRIPLET: 'arm64-android'
            QT_ARCH: 'android_arm64_v8a'
                
    runs-on: macos-12
    env: # update README for devs if you modify these env. variables
      QT_VERSION: '6.5.2'
      ANDROIDAPI: 24
      NDK_VERSION: '25.1.8937393'
      NDK_VERSION_FULL: r25b
      JDK_VERSION: 11
      SDK_PLATFORM: android-33
      SDK_BUILD_TOOLS: 33.0.1
      XC_VERSION: ${{ '14.2' }}
      QT_ARCH: "android"
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
      VCPKG_BASELINE: "d765306b074717dea8dc1c4723e1b025acb61c2d" # use scripts/update_vcpkg_base.bash to change

    steps:
      - uses: actions/checkout@v3
        with:
          path: input-sdk

      - name: Prepare vars
        id: vars
        run: |
          brew install automake bison flex gnu-sed autoconf-archive libtool gettext cmake ninja
          echo $(brew --prefix bison)/bin >> $GITHUB_PATH
          echo $(brew --prefix flex)/bin >> $GITHUB_PATH
          echo $(brew --prefix gettext)/bin >> $GITHUB_PATH

          pip3 install -U pip
          pip3 install aqtinstall

      - name: Setup compiler
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XC_VERSION }}

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION_FULL }}
          add-to-path: true

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
         java-version: ${{ env.JDK_VERSION }}
         distribution: zulu

      - name: Setup Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.1.2

      - name: Install Android Tools
        run: |
          sdkmanager --licenses && sdkmanager --verbose "platforms;${SDK_PLATFORM}" "build-tools;${SDK_BUILD_TOOLS}" tools platform-tools

      - name: Restore cached Qt
        id: cache-qt-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-v15-${{ env.QT_VERSION }}-${{ matrix.QT_ARCH }}

      - name: Install Qt
        if: steps.cache-qt-restore.outputs.cache-hit != 'true'
        run: |
          python3 -m aqt install-qt \
            mac android ${{ env.QT_VERSION }} ${{ matrix.QT_ARCH }} \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt

          python3 -m aqt install-qt \
            mac desktop ${{ env.QT_VERSION }} \
            -m qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools \
            -O ${{ github.workspace }}/Qt

      - name: Save Qt cache
        uses: actions/cache/save@v3
        if: steps.cache-qt-restore.outputs.cache-hit != 'true'
        id: cache-qt-save
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ steps.cache-qt-restore.outputs.cache-primary-key }}

      - name: Get vcpkg
        shell: bash
        run: |
          mkdir -p "${{ env.VCPKG_ROOT }}"
          cd "${{ env.VCPKG_ROOT }}"
          git init
          git remote add origin https://github.com/microsoft/vcpkg.git
          git pull origin master
          git checkout $VCPKG_BASELINE

      - name: Install vcpkg
        run: |
          echo "install vcpkg"
          cd "${{ env.VCPKG_ROOT }}"
          chmod +x ./bootstrap-vcpkg.sh
          ./bootstrap-vcpkg.sh

      - name: Build Deps
        run: |
          export Qt6_DIR=${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/${{ matrix.QT_ARCH }}
          export QT_HOST_PATH=${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/macos
          export PATH=${{ env.VCPKG_ROOT }}:$PATH
          
          vcpkg --version
          ls -la ${Qt6_DIR}/lib
          
          mkdir -p ${{ github.workspace }}/build
          cd ${{ github.workspace }}/build
          cmake -B ${{ github.workspace }}/build \
                -S ${{ github.workspace }}/input-sdk \
                -DCMAKE_TOOLCHAIN_FILE:PATH="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
                -G Ninja \
                -DVCPKG_TARGET_TRIPLET=${{ matrix.TRIPLET }} \
                -DVCPKG_OVERLAY_TRIPLETS:PATH="${{ github.workspace }}/input-sdk/vcpkg-overlay/triplets" \
                -DVCPKG_OVERLAY_PORTS="${{ github.workspace }}/input-sdk/vcpkg-overlay/ports" \
                -D ANDROID_SDK=${ANDROID_HOME} \
                -D ANDROID_SDK_ROOT=${ANDROID_HOME} \
                -D ANDROID_NDK_VERSION="${{ env.NDK_VERSION }}" \
                -D ANDROID_BUILD_TOOLS_VERSION="${{ env.SDK_BUILD_TOOLS }}" \
                -DCMAKE_MAKE_PROGRAM=ninja

      - name: Upload build logs on deps failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-logs-${{ matrix.TRIPLET }}
          path: |
            ${{ env.VCPKG_ROOT }}/buildtrees/**/*.log

      - name: Build Test App
        run: |
          cd ${{ github.workspace }}/build/${{ matrix.arch }}
          cmake --build . --config Release --verbose

      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v2.0
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create SDK data folder 
        run: |
            mkdir -p ${{ github.workspace }}/sdk
            cp -R ${{ github.workspace }}/build/vcpkg_installed/${{ matrix.TRIPLET }}/* ${{ github.workspace }}/sdk/
            rm -rf ${{ github.workspace }}/sdk/debug
            rm -rf ${{ github.workspace }}/sdk/etc
            rm -rf ${{ github.workspace }}/sdk/mkspecs
            rm -rf ${{ github.workspace }}/sdk/share
            rm -rf ${{ github.workspace }}/sdk/tools
            
            SDK_TAR=mergin-maps-input-sdk-qt-${{ env.QT_VERSION }}-${{ matrix.TRIPLET }}-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
            echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
            
            cd ${{ github.workspace }}/sdk/
            find libs/
            tar -c -z -f ${{ github.workspace }}/${SDK_TAR} ./

      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TRIPLET }}-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
