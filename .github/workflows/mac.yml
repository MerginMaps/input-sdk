name: Build macOS

on:
  push:
    paths:
      - 'mac/**'
      - '.github/workflows/mac.yml'
      - 'versions.conf'
  release:
    types:
      - published

jobs:
  mac_os_build:
    runs-on: macos-11
    if: github.repository == 'merginmaps/input-sdk'
    env:
      QT_VERSION: 6.4.1
      ARCHES: 'mac'
      CACHE_VERSION: 1
      MACOSX_DEPLOYMENT_TARGET: 10.15.0
      XC_VERSION: ${{ '13.2.1' }}
      
    steps:
      - uses: actions/checkout@v2

      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
        
      - name: Check deps versions change
        run: |
          CHECKSUM=`md5 -r versions.conf | cut -d\  -f1`
          echo "DEPS_CHECKSUM=$CHECKSUM" >> $GITHUB_ENV

      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/build
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.QT_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.QT_VERSION }}-${{ github.ref }}-
            cache-${{ env.DEPS_CHECKSUM }}-v${{ env.CACHE_VERSION }}-${{ env.QT_VERSION }}-refs/heads/master-

      - name: Install Build Dependencies
        run: |
          echo "Versions checksum: ${{ env.DEPS_CHECKSUM }}"
          brew install bison flex automake shtool gtk-doc cmake
          echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH


      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          dir: ${{ github.workspace }}
          modules: 'qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools'
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-v1-${{ env.QT_VERSION }}-mac

      - name: Export config.conf
        run: |
          touch ./mac/config.conf
          echo -e "export QT_VERSION=${{ env.QT_VERSION }}"  >> ./mac/config.conf
          echo -e "export QT_BASE="/opt/Qt/${{ env.QT_BASE }}/macos""  >> ./mac/config.conf
          echo -e "export ROOT_OUT_PATH=${{ github.workspace }}/build"  >> ./mac/config.conf
          echo -e "export ARCHES=("\""${{ env.ARCHES }}"\"")"  >> ./mac/config.conf
          echo -e "export MACOSX_DEPLOYMENT_TARGET=("\""${{ env.MACOSX_DEPLOYMENT_TARGET }}"\"")"  >> ./mac/config.conf
          cat ./mac/config.conf

      - name: Build Sdk
        run: |
          ./mac/distribute.sh -mqgis

      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create package
        run: |
          echo "Preparing SDK_TAR"
          SDK_TAR=input-sdk-qt-${{ env.QT_VERSION }}-mac-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
          echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
          cd "${{ github.workspace }}/build/stage/mac"
          tar -c -z -f ${{ github.workspace }}/${SDK_TAR} ./
          
          echo "Preparing SUPPORTED_FORMATS"
          SUPPORTED_FORMATS="input-sdk-gdal-supported-formats-${{ steps.time.outputs.time }}-${{ github.run_number }}.log"
          cp ${{ github.workspace }}/build/stage/mac/supported_formats.log ${{ github.workspace }}/$SUPPORTED_FORMATS
          echo "SUPPORTED_FORMATS=${SUPPORTED_FORMATS}" >> $GITHUB_ENV
          
          echo "Preparing PROJ_TAR"
          PROJ_TAR=input-sdk-proj-mac-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
          echo "PROJ_TAR=${PROJ_TAR}" >> $GITHUB_ENV
          echo ".. 1/2 qgis database"
          mkdir -p ${{ github.workspace }}/proj-data/resources
          cp ${{ github.workspace }}/build/stage/mac/QGIS.app/Contents/Resources/resources/qgis.db ${{ github.workspace }}/proj-data/resources/
          cp ${{ github.workspace }}/build/stage/mac/QGIS.app/Contents/Resources/resources/srs.db ${{ github.workspace }}/proj-data/resources/
          echo ".. 2/2 proj resources"
          mkdir -p ${{ github.workspace }}/proj-data/proj
          cp ${{ github.workspace }}/build/stage/mac/share/proj/* ${{ github.workspace }}/proj-data/proj/
          cd "${{ github.workspace }}/proj-data"
          tar -c -z -f ${{ github.workspace }}/${PROJ_TAR} ./
          
      - name: Upload SDK_TAR artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}
          if-no-files-found: error    

      - name: Upload SUPPORTED_FORMATS artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SUPPORTED_FORMATS }} 
          if-no-files-found: error 
          
      - name: Upload PROJ_TAR artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.PROJ_TAR }} 
          if-no-files-found: error 

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: mac-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: "${{ env.SDK_TAR }},${{ env.SUPPORTED_FORMATS }},${{ env.PROJ_TAR }}"
          token: ${{ secrets.GITHUB_TOKEN }}
