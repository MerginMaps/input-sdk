name: Build macOS

on: [push]

concurrency:
  group: ci-${{github.ref}}-mac
  cancel-in-progress: true

jobs:
  mac_os_build:
    runs-on: macos-12
    if: github.repository == 'merginmaps/input-sdk'

    env:
      QT_VERSION: '6.5.2'
      ARCH: 'x64'
      TRIPLET: "x64-osx"
      CMAKE_GENERATOR: "Ninja"
      MACOSX_DEPLOYMENT_TARGET: 10.15.0
      XC_VERSION: ${{ '14.2' }}
      QT_ARCH: "desktop"
      VCPKG_ROOT: "/Users/runner/vcpkg"
      VCPKG_BASELINE: "d765306b074717dea8dc1c4723e1b025acb61c2d" # use scripts/update_vcpkg_base.bash to change
      CACHE_VERSION: 0
      
    steps:
      - uses: actions/checkout@v3

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XC_VERSION }}

      - uses: actions/checkout@v3

      - uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          dir: ${{ github.workspace }}
          modules: 'qtsensors qtconnectivity qt5compat qtmultimedia qtpositioning qtshadertools'
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-v1-${{ env.QT_VERSION }}-mac

      - name: Prepare build env
        run: |
          brew install automake bison flex gnu-sed autoconf-archive libtool
          echo $(brew --prefix bison)/bin >> $GITHUB_PATH
          echo $(brew --prefix flex)/bin >> $GITHUB_PATH

      - name: Restore build folder
        id: cache-build-restore
        if: ${{ github.ref != 'refs/heads/master' }} # do not use cache on master
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-build-VCPKG-${{ env.VCPKG_BASELINE }}-CACHE-v${{ env.CACHE_VERSION }}-QT-${{ env.QT_VERSION }}-${{ env.ARCH }}-gitref-${{ github.ref }}

      - name: Build SDK ${{ env.ARCH }}-osx
        run: |
          mkdir -p ${{ github.workspace }}/build/vcpkg
          cd ${{ github.workspace }}/build/vcpkg
          if [ "$(ls -A .)" ]; then
              echo "vcpkg installed - skip download"
          else
              git init .
              git remote add origin https://github.com/microsoft/vcpkg.git
              git pull origin master
              git checkout $VCPKG_BASELINE
              ./bootstrap-vcpkg.sh
          fi
          
          echo "PATH=${{ github.workspace }}/build/vcpkg:$PATH" >> $GITHUB_ENV
          which vcpkg
          
          mkdir -p ${{ github.workspace }}/build/${{ env.ARCH }}
          cd ${{ github.workspace }}/build/${{ env.ARCH }}
          cmake -B ${{ github.workspace }}/build/${{ env.ARCH }} \
                -S ${{ github.workspace }}/input-sdk/vcpkg-test \
                -DCMAKE_MODULE_PATH:PATH="${{ github.workspace }}/vcpkg-test/cmake" \
                -DCMAKE_TOOLCHAIN_FILE:PATH="${{ github.workspace }}/build/vcpkg/scripts/buildsystems/vcpkg.cmake" \
                -G Ninja \
                -DVCPKG_TARGET_TRIPLET=${{ env.ARCH }}-osx \
                -DVCPKG_OVERLAY_TRIPLETS:PATH="${{ github.workspace }}/vcpkg-overlay/triplets" \
                -DVCPKG_OVERLAY_PORTS="${{ github.workspace }}/vcpkg-overlay/ports" \
                -DCMAKE_BUILD_TYPE=Release

      - name: Upload build logs on deps failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-logs-${{ env.ARCH }}-osx
          path: |
            ${{ github.workspace }}/build/vcpkg/buildtrees/**/*.log

      - name: Save build folder
        uses: actions/cache/save@v3
        if: always() && ${{ github.ref != 'refs/heads/master' }} # do not use cache on master; save on error too
        id: cache-build-save
        with:
          path: ${{ github.workspace }}/build
          key: ${{ steps.cache-build-restore.outputs.cache-primary-key }}

      - name: Build Test App
        run: |
          cd ${{ github.workspace }}/build/${{ env.ARCH }}
          ninja

      - name: Run Tests
        run: |
          cd ${{ github.workspace }}/build/${{ env.ARCH }}
          ./merginmapsinputsdk

      - name: Get TimeStamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYYMMDD'

      - name: Create GDAL supported formats 
        run: |
            ${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/x64-osx/tools/gdal/gdalinfo --formats | tee -a ${{ github.workspace }}/supported_formats.log
            ${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/x64-osx/tools/gdal/ogrinfo --formats | tee -a ${{ github.workspace }}/supported_formats.log
            
            SUPPORTED_FORMATS="input-sdk-gdal-supported-formats-${{ steps.time.outputs.time }}-${{ github.run_number }}.log"
            echo "SUPPORTED_FORMATS=${SUPPORTED_FORMATS}" >> $GITHUB_ENV
            
            cat ${{ github.workspace }}/supported_formats.log

      - name: Create PROJ data folder 
        run: |
            mkdir -p ${{ github.workspace }}/proj-data
            echo ".. 1/2 qgis database"
            mkdir -p ${{ github.workspace }}/proj-data/resources
            ${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/x64-osx/share/qgis/proj/qgis.db ${{ github.workspace }}/proj-data/resources/
            ${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/x64-osx/share/qgis/proj/srs.db ${{ github.workspace }}/proj-data/resources/
            echo ".. 2/2 proj resources"
            mkdir -p ${{ github.workspace }}/proj-data/proj
            ${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/x64-osx/share/proj/* ${{ github.workspace }}/proj-data/proj/
            
            PROJ_TAR=input-sdk-proj-mac-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
            echo "PROJ_TAR=${PROJ_TAR}" >> $GITHUB_ENV
            
            cd "${{ github.workspace }}/proj-data"
            find ./
            tar -c -z -f ${{ github.workspace }}/${PROJ_TAR} ./


      - name: Create SDK data folder 
        run: |
            mkdir -p ${{ github.workspace }}/sdk
            cp -R ${{ github.workspace }}/build/${{ env.ARCH }}/vcpkg_installed/x64-osx/* ${{ github.workspace }}/sdk/*
            rm -rf ${{ github.workspace }}/sdk/debug
            rm -rf ${{ github.workspace }}/sdk/etc
            rm -rf ${{ github.workspace }}/sdk/mkspecs
            rm -rf ${{ github.workspace }}/sdk/share
            rm -rf ${{ github.workspace }}/sdk/tools
            
            SDK_TAR=input-sdk-qt-${{ env.QT_VERSION }}-mac-${{ steps.time.outputs.time }}-${{ github.run_number }}.tar.gz
            echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
            
            cd ${{ github.workspace }}/sdk/
            find libs/
            tar -c -z -f ${{ github.workspace }}/${SDK_TAR} ./

      - name: Upload SDK_TAR artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}
          if-no-files-found: error    

      - name: Upload SUPPORTED_FORMATS artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/${{ env.SUPPORTED_FORMATS }} 
          if-no-files-found: error 
          
      - name: Upload PROJ_TAR artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/${{ env.PROJ_TAR }} 
          if-no-files-found: error 

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: mac-${{ steps.time.outputs.time }}-${{ github.run_number }}
          allowUpdates: true
          artifacts: "${{ env.SDK_TAR }},${{ env.SUPPORTED_FORMATS }},${{ env.PROJ_TAR }}"
          token: ${{ secrets.GITHUB_TOKEN }}
