name: Build macOS

on:
  push:
    paths:	
      - 'mac/**'
      - '.github/workflows/mac.yml'
  release:
    types:
      - published

jobs:
  mac_os_build:
    runs-on: macos-10.15
    if: github.repository == 'lutraconsulting/input-sdk'
    env:
      SDK_VERSION: ${{ github.run_number }}
      QGIS_DEPS_VERSION: 0.9
      QGIS_DEPS_PATCH_VERSION: 0
      QT_VERSION: 5.15.2
      QT_BASE: /opt/Qt/5.15.2
      ROOT_OUT_PATH: ${{ github.workspace }}/input-sdk-mac-${{ github.run_number }}
      ARCHES: 'mac'
      CACHE_VERSION: 1
      CCACHE_DIR: /Users/runner/work/ccache
      BUILD_DIR: /Users/runner/work/QGIS/build-QGIS
      # apparently we cannot cache /opt directory as it fails to restore
      # so we copy the deps in the home directory
      DEPS_CACHE_DIR: /Users/runner/work/deps-cache

    steps:
      - uses: actions/checkout@v2

      - name: Prepare build cache for pull request
        uses: pat-s/always-upload-cache@v2.1.5
        if: github.event_name == 'pull_request'
        with:
          path: ${{ env.CCACHE_DIR }}
          key: build-mac-ccache-${{ github.actor }}-${{ github.head_ref }}-${{ github.sha }}
          # The head_ref or source branch of the pull request in a workflow run.
          # The base_ref or target branch of the pull request in a workflow run.
          restore-keys: |
            build-mac-ccache-${{ github.actor }}-${{ github.head_ref }}-
            build-mac-ccache-refs/heads/${{ github.base_ref }}-
            build-mac-ccache-refs/heads/master-

      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        if: github.event_name != 'pull_request'
        with:
          path: ${{ env.CCACHE_DIR }}
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: build-mac-ccache-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            build-mac-ccache-${{ github.ref }}-
            build-mac-ccache-refs/heads/master-

      # Qt caching
      - name: Cache Qt
        id: cache-qt
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ env.DEPS_CACHE_DIR }}/Qt/${{ env.QT_VERSION }}
          key: mac-qt-v4-${{ env.QT_VERSION }}

      - name: Restore Qt
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: |
          sudo mkdir -p /opt
          sudo mkdir -p /opt/Qt
          sudo cp -r ${DEPS_CACHE_DIR}/Qt/${QT_VERSION} /opt/Qt/${QT_VERSION}
      - name: Download Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          wget https://qgis.org/downloads/macos/deps/qt-${QT_VERSION}.tar.gz
          mkdir -p ${DEPS_CACHE_DIR}
          mkdir -p ${DEPS_CACHE_DIR}/Qt

      # QGIS-deps caching
      - name: Cache qgis-deps
        id: cache-deps
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ env.DEPS_CACHE_DIR }}/QGIS/qgis-deps-${{ env.QGIS_DEPS_VERSION }}.${{ env.QGIS_DEPS_PATCH_VERSION }}
          key: mac-qgis-deps-v4-${{ env.QGIS_DEPS_VERSION }}.${{ env.QGIS_DEPS_PATCH_VERSION }}

      - name: Restore qgis-deps
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          sudo mkdir -p /opt
          sudo mkdir -p /opt/QGIS
          sudo cp -r ${DEPS_CACHE_DIR}/QGIS/qgis-deps-${QGIS_DEPS_VERSION}.${QGIS_DEPS_PATCH_VERSION} /opt/QGIS/qgis-deps-${QGIS_DEPS_VERSION}

      - name: Download qgis-deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          wget https://qgis.org/downloads/macos/deps/qgis-deps-${QGIS_DEPS_VERSION}.${QGIS_DEPS_PATCH_VERSION}.tar.gz
          mkdir -p ${DEPS_CACHE_DIR}
          mkdir -p ${DEPS_CACHE_DIR}/QGIS

      - name: Install Qt and deps
        env:
          QT_ALREADY_CACHED: ${{ steps.cache-qt.outputs.cache-hit }}
          QGIS_DEPS_ALREADY_CACHED: ${{ steps.cache-deps.outputs.cache-hit }}
        run: |
          wget https://qgis.org/downloads/macos/deps/install_qgis_deps-${QGIS_DEPS_VERSION}.${QGIS_DEPS_PATCH_VERSION}.bash
          chmod +x ./install_qgis_deps-${QGIS_DEPS_VERSION}.${QGIS_DEPS_PATCH_VERSION}.bash
          echo ::group::Install deps
          sudo ./install_qgis_deps-${QGIS_DEPS_VERSION}.${QGIS_DEPS_PATCH_VERSION}.bash
          echo ::endgroup::
          [[ ${QT_ALREADY_CACHED} != "true" ]] && cp -r /opt/Qt/${QT_VERSION} ${DEPS_CACHE_DIR}/Qt/${QT_VERSION} || true
          [[ ${QGIS_DEPS_ALREADY_CACHED} != "true" ]] && cp -r /opt/QGIS/qgis-deps-${QGIS_DEPS_VERSION} ${DEPS_CACHE_DIR}/QGIS/qgis-deps-${QGIS_DEPS_VERSION}.${QGIS_DEPS_PATCH_VERSION} || true

      - name: Install ccache
        run: |
          mkdir -p ${CCACHE_DIR}
          brew install ccache
          ccache --set-config=max_size=2.0G
          ccache -s

      - name: Export config.conf
        run: |
          echo "export SDK_VERSION=${{ env.SDK_VERSION }}" > ./mac/config.conf
          echo "export QT_VERSION=${{ env.QT_VERSION }}"  >> ./mac/config.conf
          echo "export DEPS_VER=${{ env.QGIS_DEPS_VERSION }}"  >> ./mac/config.conf
          echo "export QGIS_DEPS="/opt/QGIS/qgis-deps-${{ env.QGIS_DEPS_VERSION }}/stage"  >> ./mac/config.conf		  
          echo "export ROOT_OUT_PATH=${{ env.ROOT_OUT_PATH }}"  >> ./mac/config.conf
          echo "export PATH=/opt/QGIS/qgis-deps-${{ env.QGIS_DEPS_VERSION }}/stage/bin:${{ env.QT_BASE }}/bin:\$PATH"  >> ./mac/config.conf
          echo "export QT_BASE=${{ env.QT_BASE }}"  >> ./mac/config.conf
          echo 'export ARCHES=("${{ env.ARCHES }}")'  >> ./mac/config.conf		  
          cat ./mac/config.conf

      - name: Build Sdk
        run: |
          ./mac/distribute.sh -mqgis

      - name: Create package
        run: |
          SDK_TAR=input-sdk-qt-${{ env.QT_VERSION }}-deps-${{ env.QGIS_DEPS_VERSION }}-mac-${{ env.SDK_VERSION }}.tar.gz
          echo "SDK_TAR=${SDK_TAR}" >> $GITHUB_ENV
          ./mac/create_package.bash

      - name: Upload Sdk in Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.SDK_TAR }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.SDK_TAR }}
          token: ${{ secrets.GITHUB_TOKEN }}
